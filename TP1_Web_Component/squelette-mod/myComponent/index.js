const getBaseURL = () => {
  return new URL('.', import.meta.url);
};

class MyLogo extends HTMLElement {
  style = `
    @import url('https://fonts.googleapis.com/css2?family=Grey+Qo&display=swap');

    #logo {
        font-family: 'Grey Qo', cursive;
        display: inline-block;
        font-size : 50px;
        border:5px solid black;

    }

   }
    .focus-in-expand {
        -webkit-animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }
    .focus-in-expand-fwd {
        -webkit-animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }
    .tracking-in-expand {
        -webkit-animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
                animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
    }
    /* ----------------------------------------------
    
  .focus-in-expand {
      -webkit-animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
              animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
  }
  .focus-in-expand-fwd {
      -webkit-animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
              animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
  }
  .tracking-in-expand {
      -webkit-animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
              animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
  }
  /* ----------------------------------------------
 * Generated by Animista on 2021-9-13 11:7:37
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation focus-in-expand
 * ----------------------------------------
 */
@-webkit-keyframes focus-in-expand {
  0% {
    letter-spacing: -0.5em;
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-filter: blur(0px);
            filter: blur(0px);
    opacity: 1;
  }
}
@keyframes focus-in-expand {
  0% {
    letter-spacing: -0.5em;
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-filter: blur(0px);
            filter: blur(0px);
    opacity: 1;
  }
}


    /* ----------------------------------------------
 * Generated by Animista on 2021-9-20 9:19:32
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation focus-in-expand-fwd
 * ----------------------------------------
 */
@-webkit-keyframes focus-in-expand-fwd {
  0% {
    letter-spacing: -0.5em;
    -webkit-transform: translateZ(-800px);
            transform: translateZ(-800px);
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateZ(0);
            transform: translateZ(0);
    -webkit-filter: blur(0);
            filter: blur(0);
    opacity: 1;
  }
}
@keyframes focus-in-expand-fwd {
  0% {
    letter-spacing: -0.5em;
    -webkit-transform: translateZ(-800px);
            transform: translateZ(-800px);
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateZ(0);
            transform: translateZ(0);
    -webkit-filter: blur(0);
            filter: blur(0);
    opacity: 1;
  }
}

/* ----------------------------------------------
 * Generated by Animista on 2021-9-20 9:22:2
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation tracking-in-expand
 * ----------------------------------------
 */
@-webkit-keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}
@keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}

    `;
  html = `
    <center>
    <div id="logo" >mon nouveau logo</div>
    <br>
    <br>
    Text : <input type= "text" id="textEditor" > 
    <br>
    <div>
      couleur : <input type="color" id="selecteurCouleur">
    <br>
      Taille : 5 <input type="range" val=40 min=5 max=150 
                          id="selecteurTaille"> 100 
    </div>
    </center>                  
    `;

  constructor() {
    super();
    // On crée le "shadow DOM"
    this.attachShadow({ mode: "open" });

    // récupérer les propriétés/attributs HTML
    this.couleur = this.getAttribute("couleur");
    if (!this.couleur) this.couleur = "black";

    console.log("couleur récupérée = " + this.couleur);

    this.text = this.getAttribute("text");
    this.animationClass = this.getAttribute("animation");
    this.size = this.getAttribute("size");
  }

  connectedCallback() {
    // ici on instancie l'interface graphique etc.
    this.shadowRoot.innerHTML = `<style>${this.style}</style>`
      + this.html;

    this.logo = this.shadowRoot.querySelector("#logo");

    // affecter les valeurs des attributs à la création
    this.logo.style.color = this.couleur;
    this.logo.classList.add(this.animationClass);
    this.logo.textContent = this.text;

    this.declareEcouteurs();

    // On modifie les URLs relatifs
    this.fixRelativeURLs();
  }

  fixRelativeURLs() {
    let images = this.shadowRoot.querySelectorAll('img');
    images.forEach((e) => {
      console.log("dans le foreach")
      let imagePath = e.getAttribute('src');
      e.src = getBaseURL() + '/' + imagePath;
    });

    //console.log(getBaseURL() +  "images/flammes.jpg")
    this.logo.style.background = "url(" + getBaseURL() + "images/flammes.jpg)";
  }

  declareEcouteurs() {
    this.shadowRoot.querySelector("#selecteurCouleur")
      .addEventListener("input", (event) => {
        this.changeCouleur(event.target.value);
      });

    this.shadowRoot.querySelector("#selecteurTaille")
      .addEventListener("input", (event) => {
        this.changeSize(event.target.value);
      });

    this.shadowRoot
      .querySelector("#textEditor")
      .addEventListener("input", (event) => {
        if (event.target.value)
          this.changetext(event.target.value);
        else
          this.changetext("Web Components");
      });


  }

  // Fonction
  changeCouleur(val) {
    this.logo.style.color = val;
  }


  changeSize(val) {
    this.logo.style.fontSize = val + "px";
  }

  changetext(val) {
    this.logo.textContent = val;
  }

}

customElements.define("my-logo", MyLogo);


class MyLogo1 extends HTMLElement {
  style = `
  @import url('https://fonts.googleapis.com/css2?family=Grey+Qo&display=swap');

  #logo {
      font-family: 'Grey Qo', cursive;
      display: inline-block;
      font-size : 50px;
      border:5px solid black;

  }

 }
  .focus-in-expand {
      -webkit-animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
              animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
  }
  .focus-in-expand-fwd {
      -webkit-animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
              animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
  }
  .tracking-in-expand {
      -webkit-animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
              animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
  }
  /* ----------------------------------------------
  
.focus-in-expand {
    -webkit-animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
            animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
}
.focus-in-expand-fwd {
    -webkit-animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
            animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
}
.tracking-in-expand {
    -webkit-animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
            animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
}
/* ----------------------------------------------
* Generated by Animista on 2021-9-13 11:7:37
* Licensed under FreeBSD License.
* See http://animista.net/license for more info. 
* w: http://animista.net, t: @cssanimista
* ---------------------------------------------- */

/**
* ----------------------------------------
* animation focus-in-expand
* ----------------------------------------
*/
@-webkit-keyframes focus-in-expand {
0% {
  letter-spacing: -0.5em;
  -webkit-filter: blur(12px);
          filter: blur(12px);
  opacity: 0;
}
100% {
  -webkit-filter: blur(0px);
          filter: blur(0px);
  opacity: 1;
}
}
@keyframes focus-in-expand {
0% {
  letter-spacing: -0.5em;
  -webkit-filter: blur(12px);
          filter: blur(12px);
  opacity: 0;
}
100% {
  -webkit-filter: blur(0px);
          filter: blur(0px);
  opacity: 1;
}
}


  /* ----------------------------------------------
* Generated by Animista on 2021-9-20 9:19:32
* Licensed under FreeBSD License.
* See http://animista.net/license for more info. 
* w: http://animista.net, t: @cssanimista
* ---------------------------------------------- */

/**
* ----------------------------------------
* animation focus-in-expand-fwd
* ----------------------------------------
*/
@-webkit-keyframes focus-in-expand-fwd {
0% {
  letter-spacing: -0.5em;
  -webkit-transform: translateZ(-800px);
          transform: translateZ(-800px);
  -webkit-filter: blur(12px);
          filter: blur(12px);
  opacity: 0;
}
100% {
  -webkit-transform: translateZ(0);
          transform: translateZ(0);
  -webkit-filter: blur(0);
          filter: blur(0);
  opacity: 1;
}
}
@keyframes focus-in-expand-fwd {
0% {
  letter-spacing: -0.5em;
  -webkit-transform: translateZ(-800px);
          transform: translateZ(-800px);
  -webkit-filter: blur(12px);
          filter: blur(12px);
  opacity: 0;
}
100% {
  -webkit-transform: translateZ(0);
          transform: translateZ(0);
  -webkit-filter: blur(0);
          filter: blur(0);
  opacity: 1;
}
}

/* ----------------------------------------------
* Generated by Animista on 2021-9-20 9:22:2
* Licensed under FreeBSD License.
* See http://animista.net/license for more info. 
* w: http://animista.net, t: @cssanimista
* ---------------------------------------------- */

/**
* ----------------------------------------
* animation tracking-in-expand
* ----------------------------------------
*/
@-webkit-keyframes tracking-in-expand {
0% {
  letter-spacing: -0.5em;
  opacity: 0;
}
40% {
  opacity: 0.6;
}
100% {
  opacity: 1;
}
}
@keyframes tracking-in-expand {
0% {
  letter-spacing: -0.5em;
  opacity: 0;
}
40% {
  opacity: 0.6;
}
100% {
  opacity: 1;
}
}

  `;
  html = `
  <center>
  <div id="logo" ></div>
  <br>
  <br>

  Text : <input type= "text" id="textEditor" > 
  <br>
  <div>
    couleur : <input type="color" id="selecteurCouleur">
  <br>
    Taille : 5 <input type="range" val=40 min=5 max=150
                        id="selecteurTaille"> 100 
  </div>
  </center>              
  `;

  constructor() {
    super();
    // On crée le "shadow DOM"
    this.attachShadow({ mode: "open" });

    // récupérer les propriétés/attributs HTML
    this.couleur = this.getAttribute("couleur");
    if (!this.couleur) this.couleur = "black";

    console.log("couleur récupérée = " + this.couleur);

    this.text = this.getAttribute("text");
    this.animationClass = this.getAttribute("animation");
    this.controls = this.getAttribute("controls");
    this.size = this.getAttribute("size");
  }

  connectedCallback() {
    // ici on instancie l'interface graphique etc.
    this.shadowRoot.innerHTML = `<style>${this.style}</style>`
      + this.html;

    this.logo = this.shadowRoot.querySelector("#logo");

    // affecter les valeurs des attributs à la création
    this.logo.style.color = this.couleur;
    this.logo.classList.add(this.animationClass);
    this.logo.textContent = this.text;


    this.declareEcouteurs();

    // On modifie les URLs relatifs
    this.fixRelativeURLs();
  }

  fixRelativeURLs() {
    let images = this.shadowRoot.querySelectorAll('img');
    images.forEach((e) => {
      console.log("dans le foreach")
      let imagePath = e.getAttribute('src');
      e.src = getBaseURL() + '/' + imagePath;
    });

    //console.log(getBaseURL() +  "images/flammes.jpg")
    this.logo.style.background = "url(" + getBaseURL() + "images/flowers.jpg)";
  }

  declareEcouteurs() {
    this.shadowRoot.querySelector("#selecteurCouleur")
      .addEventListener("input", (event) => {
        this.changeCouleur(event.target.value);
      });

    this.shadowRoot.querySelector("#selecteurTaille")
      .addEventListener("input", (event) => {
        this.changeSize(event.target.value);
      });

    this.shadowRoot
      .querySelector("#textEditor")
      .addEventListener("input", (event) => {
        if (event.target.value)
          this.changetext(event.target.value);
        else
          this.changetext("Web Components");
      });

  }

  // Fonction
  changeCouleur(val) {
    this.logo.style.color = val;
  }

  changeSize(val) {
    this.logo.style.fontSize = val + "px";
  }

  changetext(val) {
    this.logo.textContent = val;
  }
}

customElements.define("my-logo1", MyLogo1);
